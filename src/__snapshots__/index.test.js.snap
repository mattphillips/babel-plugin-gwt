// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gwt transforms fit block with given label: transforms fit block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms ftest test block with given label: transforms ftest test block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms it block with given label: transforms it block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms it block with given when then labels: transforms it block with given when then labels 1`] = `
"
it('add', () => {
  given: 'a and b'
  const a = 1;
  const b = 1;

  when: 'added'
  const actual = a + b;

  then: 'returns 2'
  expect(actual).toBe(2);
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b when: added then: returns 2', () => {
  const a = 1;
  const b = 1;

  const actual = a + b;

  expect(actual).toBe(2);
});
"
`;

exports[`gwt transforms it title to be a tagged template string with arguments specified in given when then with $ symbol: transforms it title to be a tagged template string with arguments specified in given when then with $ symbol 1`] = `
"
it('add', () => {
  given: '$a and $b'

  when: 'added'
  const actual = a + b;

  then: 'returns $expected'
  expect(actual).toBe(expected);

  where: {
    a | b || expected
    0 | 0 || 0
    1 | 1 || 2
  }
});

      ↓ ↓ ↓ ↓ ↓ ↓

[{
  a: 0,
  b: 0,
  expected: 0
}, {
  a: 1,
  b: 1,
  expected: 2
}].forEach(({
  a,
  b,
  expected
}) => {
  it(\`add given: \${a} and \${b} when: added then: returns \${expected}\`, () => {
    const actual = a + b;

    expect(actual).toBe(expected);
  });
});
"
`;

exports[`gwt transforms it title to be a tagged template string with arguments specified in title with $ symbol: transforms it title to be a tagged template string with arguments specified in title with $ symbol 1`] = `
"
it('.add($a, $b)', () => {
  when: 'added'
  const actual = a + b;

  then: 'returns $expected'
  expect(actual).toBe(expected);

  where: {
    a | b || expected
    0 | 0 || 0
    1 | 1 || 2
  }
});

      ↓ ↓ ↓ ↓ ↓ ↓

[{
  a: 0,
  b: 0,
  expected: 0
}, {
  a: 1,
  b: 1,
  expected: 2
}].forEach(({
  a,
  b,
  expected
}) => {
  it(\`.add(\${a}, \${b}) when: added then: returns \${expected}\`, () => {
    const actual = a + b;

    expect(actual).toBe(expected);
  });
});
"
`;

exports[`gwt transforms it to multiple rows when given a where block tabel: transforms it to multiple rows when given a where block tabel 1`] = `
"
it('add', () => {
  given: 'a and b'

  when: 'added'
  const actual = a + b;

  then: 'returns 2'
  expect(actual).toBe(expected);

  where: {
    a | b || expected
    0 | 0 || 0
    1 | 1 || 2
  }
});

      ↓ ↓ ↓ ↓ ↓ ↓

[{
  a: 0,
  b: 0,
  expected: 0
}, {
  a: 1,
  b: 1,
  expected: 2
}].forEach(({
  a,
  b,
  expected
}) => {
  it(\`add given: a and b when: added then: returns 2\`, () => {
    const actual = a + b;

    expect(actual).toBe(expected);
  });
});
"
`;

exports[`gwt transforms it without where block when only given table titles: transforms it without where block when only given table titles 1`] = `
"
it('add', () => {
  given: 'a and b'

  when: 'added'
  const actual = a + b;

  then: 'returns 2'
  expect(actual).toBe(expected);

  where: {
    a | b || expected
  }
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b when: added then: returns 2', () => {
  const actual = a + b;

  expect(actual).toBe(expected);
});
"
`;

exports[`gwt transforms it.only block with given label: transforms it.only block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms it.skip block with given label: transforms it.skip block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms test block with given label: transforms test block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms test.only block with given label: transforms test.only block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms test.skip block with given label: transforms test.skip block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms xit block with given label: transforms xit block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;

exports[`gwt transforms xtest block with given label: transforms xtest block with given label 1`] = `
"
it('add', () => {
  given: 'a and b'
});

      ↓ ↓ ↓ ↓ ↓ ↓

it('add given: a and b', () => {});
"
`;
